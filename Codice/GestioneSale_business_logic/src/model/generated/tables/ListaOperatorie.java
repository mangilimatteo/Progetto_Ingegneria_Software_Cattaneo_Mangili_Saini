/*
 * This file is generated by jOOQ.
 */
package model.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import model.generated.DefaultSchema;
import model.generated.Keys;
import model.generated.tables.records.ListaOperatorieRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ListaOperatorie extends TableImpl<ListaOperatorieRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LISTA_OPERATORIE</code>
     */
    public static final ListaOperatorie LISTA_OPERATORIE = new ListaOperatorie();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListaOperatorieRecord> getRecordType() {
        return ListaOperatorieRecord.class;
    }

    /**
     * The column <code>LISTA_OPERATORIE.INTERVENTO</code>.
     */
    public final TableField<ListaOperatorieRecord, String> INTERVENTO = createField(DSL.name("INTERVENTO"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>LISTA_OPERATORIE.PRIMO_OPERATORE</code>.
     */
    public final TableField<ListaOperatorieRecord, String> PRIMO_OPERATORE = createField(DSL.name("PRIMO_OPERATORE"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>LISTA_OPERATORIE.GIORNO</code>.
     */
    public final TableField<ListaOperatorieRecord, String> GIORNO = createField(DSL.name("GIORNO"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>LISTA_OPERATORIE.ORARIO</code>.
     */
    public final TableField<ListaOperatorieRecord, String> ORARIO = createField(DSL.name("ORARIO"), SQLDataType.CLOB.nullable(false), this, "");

    private ListaOperatorie(Name alias, Table<ListaOperatorieRecord> aliased) {
        this(alias, aliased, null);
    }

    private ListaOperatorie(Name alias, Table<ListaOperatorieRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LISTA_OPERATORIE</code> table reference
     */
    public ListaOperatorie(String alias) {
        this(DSL.name(alias), LISTA_OPERATORIE);
    }

    /**
     * Create an aliased <code>LISTA_OPERATORIE</code> table reference
     */
    public ListaOperatorie(Name alias) {
        this(alias, LISTA_OPERATORIE);
    }

    /**
     * Create a <code>LISTA_OPERATORIE</code> table reference
     */
    public ListaOperatorie() {
        this(DSL.name("LISTA_OPERATORIE"), null);
    }

    public <O extends Record> ListaOperatorie(Table<O> child, ForeignKey<O, ListaOperatorieRecord> key) {
        super(child, key, LISTA_OPERATORIE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ListaOperatorieRecord> getPrimaryKey() {
        return Keys.LISTA_OPERATORIE__PK_LISTA_OPERATORIE;
    }

    @Override
    public List<ForeignKey<ListaOperatorieRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LISTA_OPERATORIE__FK_LISTA_OPERATORIE_PK_LISTA_ATTESA);
    }

    private transient ListaAttesa _listaAttesa;

    /**
     * Get the implicit join path to the <code>LISTA_ATTESA</code> table.
     */
    public ListaAttesa listaAttesa() {
        if (_listaAttesa == null)
            _listaAttesa = new ListaAttesa(this, Keys.LISTA_OPERATORIE__FK_LISTA_OPERATORIE_PK_LISTA_ATTESA);

        return _listaAttesa;
    }

    @Override
    public ListaOperatorie as(String alias) {
        return new ListaOperatorie(DSL.name(alias), this);
    }

    @Override
    public ListaOperatorie as(Name alias) {
        return new ListaOperatorie(alias, this);
    }

    @Override
    public ListaOperatorie as(Table<?> alias) {
        return new ListaOperatorie(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ListaOperatorie rename(String name) {
        return new ListaOperatorie(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ListaOperatorie rename(Name name) {
        return new ListaOperatorie(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ListaOperatorie rename(Table<?> name) {
        return new ListaOperatorie(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
