/*
 * This file is generated by jOOQ.
 */
package model.generated.tables;


import java.util.function.Function;

import model.generated.DefaultSchema;
import model.generated.tables.records.InterventiRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Interventi extends TableImpl<InterventiRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>INTERVENTI</code>
     */
    public static final Interventi INTERVENTI = new Interventi();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InterventiRecord> getRecordType() {
        return InterventiRecord.class;
    }

    /**
     * The column <code>INTERVENTI.ID</code>.
     */
    public final TableField<InterventiRecord, String> ID = createField(DSL.name("ID"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>INTERVENTI.PAZIENTE</code>.
     */
    public final TableField<InterventiRecord, String> PAZIENTE = createField(DSL.name("PAZIENTE"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>INTERVENTI.DESCRIZIONE</code>.
     */
    public final TableField<InterventiRecord, String> DESCRIZIONE = createField(DSL.name("DESCRIZIONE"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>INTERVENTI.DIAGNOSI</code>.
     */
    public final TableField<InterventiRecord, String> DIAGNOSI = createField(DSL.name("DIAGNOSI"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>INTERVENTI.ANAMNESI_PROSSIMA</code>.
     */
    public final TableField<InterventiRecord, String> ANAMNESI_PROSSIMA = createField(DSL.name("ANAMNESI_PROSSIMA"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<InterventiRecord, Object> TEMPO = createField(DSL.name("TEMPO"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"ATTESA	 			TEXT\"").nullable(false), this, "");

    /**
     * The column <code>INTERVENTI.NOTE</code>.
     */
    public final TableField<InterventiRecord, String> NOTE = createField(DSL.name("NOTE"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>INTERVENTI.VIA</code>.
     */
    public final TableField<InterventiRecord, String> VIA = createField(DSL.name("VIA"), SQLDataType.CLOB, this, "");

    private Interventi(Name alias, Table<InterventiRecord> aliased) {
        this(alias, aliased, null);
    }

    private Interventi(Name alias, Table<InterventiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>INTERVENTI</code> table reference
     */
    public Interventi(String alias) {
        this(DSL.name(alias), INTERVENTI);
    }

    /**
     * Create an aliased <code>INTERVENTI</code> table reference
     */
    public Interventi(Name alias) {
        this(alias, INTERVENTI);
    }

    /**
     * Create a <code>INTERVENTI</code> table reference
     */
    public Interventi() {
        this(DSL.name("INTERVENTI"), null);
    }

    public <O extends Record> Interventi(Table<O> child, ForeignKey<O, InterventiRecord> key) {
        super(child, key, INTERVENTI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Interventi as(String alias) {
        return new Interventi(DSL.name(alias), this);
    }

    @Override
    public Interventi as(Name alias) {
        return new Interventi(alias, this);
    }

    @Override
    public Interventi as(Table<?> alias) {
        return new Interventi(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Interventi rename(String name) {
        return new Interventi(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Interventi rename(Name name) {
        return new Interventi(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Interventi rename(Table<?> name) {
        return new Interventi(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, String, Object, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String, ? super String, ? super String, ? super String, ? super String, ? super Object, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String, ? super String, ? super String, ? super String, ? super String, ? super Object, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
