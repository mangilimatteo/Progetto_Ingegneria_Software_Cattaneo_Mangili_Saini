/*
 * This file is generated by jOOQ.
 */
package model.generated.tables;


import java.util.function.Function;

import model.generated.DefaultSchema;
import model.generated.tables.records.ListaAttesaRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ListaAttesa extends TableImpl<ListaAttesaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LISTA_ATTESA</code>
     */
    public static final ListaAttesa LISTA_ATTESA = new ListaAttesa();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListaAttesaRecord> getRecordType() {
        return ListaAttesaRecord.class;
    }

    /**
     * The column <code>LISTA_ATTESA.INTERVENTO</code>.
     */
    public final TableField<ListaAttesaRecord, String> INTERVENTO = createField(DSL.name("INTERVENTO"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>LISTA_ATTESA.TIPO_INTERVENTO</code>.
     */
    public final TableField<ListaAttesaRecord, String> TIPO_INTERVENTO = createField(DSL.name("TIPO_INTERVENTO"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>LISTA_ATTESA.TIPO_LISTA</code>.
     */
    public final TableField<ListaAttesaRecord, String> TIPO_LISTA = createField(DSL.name("TIPO_LISTA"), SQLDataType.CLOB.nullable(false), this, "");

    private ListaAttesa(Name alias, Table<ListaAttesaRecord> aliased) {
        this(alias, aliased, null);
    }

    private ListaAttesa(Name alias, Table<ListaAttesaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LISTA_ATTESA</code> table reference
     */
    public ListaAttesa(String alias) {
        this(DSL.name(alias), LISTA_ATTESA);
    }

    /**
     * Create an aliased <code>LISTA_ATTESA</code> table reference
     */
    public ListaAttesa(Name alias) {
        this(alias, LISTA_ATTESA);
    }

    /**
     * Create a <code>LISTA_ATTESA</code> table reference
     */
    public ListaAttesa() {
        this(DSL.name("LISTA_ATTESA"), null);
    }

    public <O extends Record> ListaAttesa(Table<O> child, ForeignKey<O, ListaAttesaRecord> key) {
        super(child, key, LISTA_ATTESA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public ListaAttesa as(String alias) {
        return new ListaAttesa(DSL.name(alias), this);
    }

    @Override
    public ListaAttesa as(Name alias) {
        return new ListaAttesa(alias, this);
    }

    @Override
    public ListaAttesa as(Table<?> alias) {
        return new ListaAttesa(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ListaAttesa rename(String name) {
        return new ListaAttesa(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ListaAttesa rename(Name name) {
        return new ListaAttesa(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ListaAttesa rename(Table<?> name) {
        return new ListaAttesa(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
