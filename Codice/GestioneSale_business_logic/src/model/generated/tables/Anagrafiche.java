/*
 * This file is generated by jOOQ.
 */
package model.generated.tables;


import java.util.function.Function;

import model.generated.DefaultSchema;
import model.generated.Keys;
import model.generated.tables.records.AnagraficheRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Anagrafiche extends TableImpl<AnagraficheRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ANAGRAFICHE</code>
     */
    public static final Anagrafiche ANAGRAFICHE = new Anagrafiche();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnagraficheRecord> getRecordType() {
        return AnagraficheRecord.class;
    }

    /**
     * The column <code>ANAGRAFICHE.NOME</code>.
     */
    public final TableField<AnagraficheRecord, String> NOME = createField(DSL.name("NOME"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ANAGRAFICHE.COGNOME</code>.
     */
    public final TableField<AnagraficheRecord, String> COGNOME = createField(DSL.name("COGNOME"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ANAGRAFICHE.CODICE</code>.
     */
    public final TableField<AnagraficheRecord, String> CODICE = createField(DSL.name("CODICE"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ANAGRAFICHE.RUOLO</code>.
     */
    public final TableField<AnagraficheRecord, String> RUOLO = createField(DSL.name("RUOLO"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ANAGRAFICHE.TELEFONO</code>.
     */
    public final TableField<AnagraficheRecord, String> TELEFONO = createField(DSL.name("TELEFONO"), SQLDataType.CLOB.nullable(false), this, "");

    private Anagrafiche(Name alias, Table<AnagraficheRecord> aliased) {
        this(alias, aliased, null);
    }

    private Anagrafiche(Name alias, Table<AnagraficheRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ANAGRAFICHE</code> table reference
     */
    public Anagrafiche(String alias) {
        this(DSL.name(alias), ANAGRAFICHE);
    }

    /**
     * Create an aliased <code>ANAGRAFICHE</code> table reference
     */
    public Anagrafiche(Name alias) {
        this(alias, ANAGRAFICHE);
    }

    /**
     * Create a <code>ANAGRAFICHE</code> table reference
     */
    public Anagrafiche() {
        this(DSL.name("ANAGRAFICHE"), null);
    }

    public <O extends Record> Anagrafiche(Table<O> child, ForeignKey<O, AnagraficheRecord> key) {
        super(child, key, ANAGRAFICHE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<AnagraficheRecord> getPrimaryKey() {
        return Keys.ANAGRAFICHE__PK_ANAGRAFICHE;
    }

    @Override
    public Anagrafiche as(String alias) {
        return new Anagrafiche(DSL.name(alias), this);
    }

    @Override
    public Anagrafiche as(Name alias) {
        return new Anagrafiche(alias, this);
    }

    @Override
    public Anagrafiche as(Table<?> alias) {
        return new Anagrafiche(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Anagrafiche rename(String name) {
        return new Anagrafiche(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Anagrafiche rename(Name name) {
        return new Anagrafiche(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Anagrafiche rename(Table<?> name) {
        return new Anagrafiche(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
