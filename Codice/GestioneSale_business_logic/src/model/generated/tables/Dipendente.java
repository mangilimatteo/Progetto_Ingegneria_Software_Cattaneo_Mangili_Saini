/*
 * This file is generated by jOOQ.
 */
package model.generated.tables;


import java.util.function.Function;

import model.generated.DefaultSchema;
import model.generated.Keys;
import model.generated.tables.records.DipendenteRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dipendente extends TableImpl<DipendenteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DIPENDENTE</code>
     */
    public static final Dipendente DIPENDENTE = new Dipendente();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DipendenteRecord> getRecordType() {
        return DipendenteRecord.class;
    }

    /**
     * The column <code>DIPENDENTE.NOME</code>.
     */
    public final TableField<DipendenteRecord, String> NOME = createField(DSL.name("NOME"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>DIPENDENTE.COGNOME</code>.
     */
    public final TableField<DipendenteRecord, String> COGNOME = createField(DSL.name("COGNOME"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>DIPENDENTE.MATRICOLA</code>.
     */
    public final TableField<DipendenteRecord, String> MATRICOLA = createField(DSL.name("MATRICOLA"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>DIPENDENTE.PASSWORD</code>.
     */
    public final TableField<DipendenteRecord, String> PASSWORD = createField(DSL.name("PASSWORD"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>DIPENDENTE.RUOLO</code>.
     */
    public final TableField<DipendenteRecord, String> RUOLO = createField(DSL.name("RUOLO"), SQLDataType.CLOB.nullable(false), this, "");

    private Dipendente(Name alias, Table<DipendenteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dipendente(Name alias, Table<DipendenteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DIPENDENTE</code> table reference
     */
    public Dipendente(String alias) {
        this(DSL.name(alias), DIPENDENTE);
    }

    /**
     * Create an aliased <code>DIPENDENTE</code> table reference
     */
    public Dipendente(Name alias) {
        this(alias, DIPENDENTE);
    }

    /**
     * Create a <code>DIPENDENTE</code> table reference
     */
    public Dipendente() {
        this(DSL.name("DIPENDENTE"), null);
    }

    public <O extends Record> Dipendente(Table<O> child, ForeignKey<O, DipendenteRecord> key) {
        super(child, key, DIPENDENTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<DipendenteRecord> getPrimaryKey() {
        return Keys.DIPENDENTE__PK_DIPENDENTE;
    }

    @Override
    public Dipendente as(String alias) {
        return new Dipendente(DSL.name(alias), this);
    }

    @Override
    public Dipendente as(Name alias) {
        return new Dipendente(alias, this);
    }

    @Override
    public Dipendente as(Table<?> alias) {
        return new Dipendente(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dipendente rename(String name) {
        return new Dipendente(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dipendente rename(Name name) {
        return new Dipendente(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dipendente rename(Table<?> name) {
        return new Dipendente(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
