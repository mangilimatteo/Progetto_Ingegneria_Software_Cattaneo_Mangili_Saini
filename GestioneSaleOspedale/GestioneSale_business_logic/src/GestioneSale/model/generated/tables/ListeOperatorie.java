/*
 * This file is generated by jOOQ.
 */
package GestioneSale.model.generated.tables;


import GestioneSale.model.generated.DefaultSchema;
import GestioneSale.model.generated.tables.records.ListeOperatorieRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ListeOperatorie extends TableImpl<ListeOperatorieRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LISTE_OPERATORIE</code>
     */
    public static final ListeOperatorie LISTE_OPERATORIE = new ListeOperatorie();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListeOperatorieRecord> getRecordType() {
        return ListeOperatorieRecord.class;
    }

    /**
     * The column <code>LISTE_OPERATORIE.INTERVENTO</code>.
     */
    public final TableField<ListeOperatorieRecord, String> INTERVENTO = createField(DSL.name("INTERVENTO"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>LISTE_OPERATORIE.PRIMO_OPERATORE</code>.
     */
    public final TableField<ListeOperatorieRecord, String> PRIMO_OPERATORE = createField(DSL.name("PRIMO_OPERATORE"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>LISTE_OPERATORIE.GIORNO</code>.
     */
    public final TableField<ListeOperatorieRecord, String> GIORNO = createField(DSL.name("GIORNO"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>LISTE_OPERATORIE.ORARIO</code>.
     */
    public final TableField<ListeOperatorieRecord, String> ORARIO = createField(DSL.name("ORARIO"), SQLDataType.CLOB.nullable(false), this, "");

    private ListeOperatorie(Name alias, Table<ListeOperatorieRecord> aliased) {
        this(alias, aliased, null);
    }

    private ListeOperatorie(Name alias, Table<ListeOperatorieRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LISTE_OPERATORIE</code> table reference
     */
    public ListeOperatorie(String alias) {
        this(DSL.name(alias), LISTE_OPERATORIE);
    }

    /**
     * Create an aliased <code>LISTE_OPERATORIE</code> table reference
     */
    public ListeOperatorie(Name alias) {
        this(alias, LISTE_OPERATORIE);
    }

    /**
     * Create a <code>LISTE_OPERATORIE</code> table reference
     */
    public ListeOperatorie() {
        this(DSL.name("LISTE_OPERATORIE"), null);
    }

    public <O extends Record> ListeOperatorie(Table<O> child, ForeignKey<O, ListeOperatorieRecord> key) {
        super(child, key, LISTE_OPERATORIE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public ListeOperatorie as(String alias) {
        return new ListeOperatorie(DSL.name(alias), this);
    }

    @Override
    public ListeOperatorie as(Name alias) {
        return new ListeOperatorie(alias, this);
    }

    @Override
    public ListeOperatorie as(Table<?> alias) {
        return new ListeOperatorie(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ListeOperatorie rename(String name) {
        return new ListeOperatorie(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ListeOperatorie rename(Name name) {
        return new ListeOperatorie(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ListeOperatorie rename(Table<?> name) {
        return new ListeOperatorie(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
